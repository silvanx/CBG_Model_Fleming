from _typeshed import Incomplete

rank: Incomplete

class ZeroController:
    setpoint: Incomplete
    label: str
    ts: Incomplete
    current_time: float
    last_time: float
    last_error: float
    last_output_value: float
    output_value: float
    state_history: Incomplete
    error_history: Incomplete
    output_history: Incomplete
    sample_times: Incomplete
    def __init__(self, setpoint: float = 0.0, ts: float = 0.02) -> None: ...
    def clear(self) -> None: ...
    def update(self, state_value, current_time): ...
    def generate_dbs_signal(self, start_time, stop_time, dt, amplitude, frequency, pulse_width, offset, last_pulse_time_prior: int = 0): ...

class ConstantController:
    setpoint: Incomplete
    max_value: Incomplete
    min_value: Incomplete
    stimulation_amplitude: Incomplete
    stimulation_frequency: Incomplete
    ts: Incomplete
    units: Incomplete
    label: Incomplete
    output_value: int
    state_history: Incomplete
    error_history: Incomplete
    output_history: Incomplete
    sample_times: Incomplete
    def __init__(self, setpoint: float = 0.0, min_value: float = 0.0, max_value: float = 1000000000.0, stimulation_amplitude: float = 0.0, stimulation_frequency: float = 130.0, ts: float = 0.0, units: str = 'mA') -> None: ...
    def clear(self) -> None: ...
    def update(self, state_value, current_time): ...
    def generate_dbs_signal(self, start_time, stop_time, dt, amplitude, frequency, pulse_width, offset, last_pulse_time_prior: int = 0): ...

class OnOffController:
    setpoint: Incomplete
    max_value: Incomplete
    min_value: Incomplete
    ramp_duration: Incomplete
    ts: Incomplete
    label: str
    output_value_increment: Incomplete
    last_output_value: int
    output_value: int
    state_history: Incomplete
    error_history: Incomplete
    output_history: Incomplete
    sample_times: Incomplete
    def __init__(self, setpoint: float = 0.0, min_value: float = 0.0, max_value: float = 1000000000.0, ramp_duration: float = 0.25, ts: float = 0.02) -> None: ...
    def clear(self) -> None: ...
    def update(self, state_value, current_time): ...
    def set_max_value(self, max_value) -> None: ...
    def set_min_value(self, min_value) -> None: ...
    def set_ramp_duration(self, ramp_duration) -> None: ...
    def set_ts(self, Ts) -> None: ...
    def set_label(self, label) -> None: ...
    def set_setpoint(self, set_point) -> None: ...
    def get_state_history(self): ...
    def get_error_history(self): ...
    def get_output_history(self): ...
    def get_sample_times(self): ...
    def get_label(self): ...

class DualThresholdController:
    upper_threshold: Incomplete
    lower_threshold: Incomplete
    max_value: Incomplete
    min_value: Incomplete
    ramp_duration: Incomplete
    ts: Incomplete
    label: str
    output_value_increment: Incomplete
    last_output_value: float
    output_value: float
    state_history: Incomplete
    error_history: Incomplete
    output_history: Incomplete
    sample_times: Incomplete
    def __init__(self, lower_threshold: float = 0.0, upper_threshold: float = 0.1, min_value: float = 0.0, max_value: float = 1000000000.0, ramp_duration: float = 0.25, ts: float = 0.02) -> None: ...
    def clear(self) -> None: ...
    def update(self, state_value, current_time): ...
    def set_upper_threshold(self, upper_threshold) -> None: ...
    def set_lower_threshold(self, lower_threshold) -> None: ...
    def set_max_value(self, max_value) -> None: ...
    def set_min_value(self, min_value) -> None: ...
    def set_ramp_duration(self, ramp_duration) -> None: ...
    def set_ts(self, Ts) -> None: ...
    def set_label(self, label) -> None: ...
    def get_state_history(self): ...
    def get_error_history(self): ...
    def get_output_history(self): ...
    def get_sample_times(self): ...
    def get_label(self): ...

class StandardPIDController:
    setpoint: Incomplete
    kp: Incomplete
    ti: Incomplete
    td: Incomplete
    min_value: Incomplete
    max_value: Incomplete
    label: Incomplete
    ts: Incomplete
    current_time: float
    last_time: float
    integral_term: float
    differential_term: float
    last_error: float
    last_output_value: float
    output_value: float
    state_history: Incomplete
    error_history: Incomplete
    output_history: Incomplete
    sample_times: Incomplete
    def __init__(self, setpoint: float = 0.0, kp: float = 0.0, ti: float = 0.0, td: float = 0.0, ts: float = 0.02, min_value: float = 0.0, max_value: float = 1000000000.0) -> None: ...
    def clear(self) -> None: ...
    def update(self, state_value, current_time): ...
    def generate_dbs_signal(self, start_time, stop_time, dt, amplitude, frequency, pulse_width, offset, last_pulse_time_prior: int = 0): ...
    def set_kp(self, proportional_gain) -> None: ...
    def set_ti(self, Ti) -> None: ...
    def set_td(self, Td) -> None: ...
    def set_setpoint(self, set_point) -> None: ...
    def set_max_value(self, max_value) -> None: ...
    def set_min_value(self, min_value) -> None: ...

class IterativeFeedbackTuningPIController:
    stage_length: Incomplete
    stage_length_samples: Incomplete
    kp: Incomplete
    ti: Incomplete
    gamma: Incomplete
    lam: Incomplete
    iteration_stage: int
    min_kp: Incomplete
    min_ti: Incomplete
    r: Incomplete
    fix_ti: Incomplete
    fix_kp: Incomplete
    r_matrix: Incomplete
    stage_two_mean: Incomplete
    normalise_error: Incomplete
    debug: Incomplete
    ts: Incomplete
    current_time: float
    last_time: float
    stage_start_time: float
    integral_term: float
    last_error: float
    last_output_value: float
    output_value: float
    def __init__(self, stage_length, setpoint: float = 0.0, kp: float = 0.0, ti: float = 0.0, ts: float = 0.02, min_value: float = 0.0, max_value: float = 1000000000.0, gamma: float = 0.005, lam: float = 1e-08, min_kp: int = 0, min_ti: int = 0, fix_ti: bool = False, fix_kp: bool = False, r_matrix: str = 'identity', stage_two_mean: bool = False, debug: bool = False, normalise_error: bool = True) -> None: ...
    def clear(self) -> None: ...
    def dc_drho(self, s): ...
    def compute_fitness_gradient(self): ...
    def new_controller_parameters(self): ...
    def reference_signal(self, elapsed_time): ...
    def update(self, state_value, current_time): ...
    def generate_dbs_signal(self, start_time, stop_time, dt, amplitude, frequency, pulse_width, offset, last_pulse_time_prior: int = 0): ...
    @property
    def label(self): ...
    @label.setter
    def label(self, value) -> None: ...
    @property
    def setpoint(self): ...
    @setpoint.setter
    def setpoint(self, value) -> None: ...
    @property
    def max_value(self): ...
    @max_value.setter
    def max_value(self, value) -> None: ...
    @property
    def min_value(self): ...
    @min_value.setter
    def min_value(self, value) -> None: ...
    @property
    def integral_term_history(self): ...
    @property
    def recorded_output(self): ...
    @property
    def state_history(self): ...
    @property
    def error_history(self): ...
    @property
    def output_history(self): ...
    @property
    def sample_times(self): ...
    @property
    def iteration_history(self): ...
    @property
    def reference_history(self): ...
    @property
    def parameter_history(self): ...

def generate_monophasic_square_dbs_signal(start_time, stop_time, dt, amplitude, frequency, pulse_width, offset, last_pulse_time_prior: int = 0): ...
